// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package generated

import (
	"context"
	"database/sql"
	"strings"
)

const getUserPostWithComments = `-- name: GetUserPostWithComments :many
SELECT users.id    AS 'user_id',
       users.username,
       posts.id    AS 'post_id',
       posts.title,
       comments.id AS 'comment_id',
       comments.body
FROM users
         JOIN posts ON users.id = posts.user_id
         LEFT JOIN comments ON posts.id = comments.post_id
WHERE users.id = ? AND posts.id = ?
`

type GetUserPostWithCommentsParams struct {
	UserID uint64
	PostID uint64
}

type GetUserPostWithCommentsRow struct {
	UserID    uint64
	Username  string
	PostID    uint64
	Title     string
	CommentID sql.NullInt64
	Body      sql.NullString
}

func (q *Queries) GetUserPostWithComments(ctx context.Context, arg GetUserPostWithCommentsParams) ([]GetUserPostWithCommentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserPostWithComments, arg.UserID, arg.PostID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserPostWithCommentsRow
	for rows.Next() {
		var i GetUserPostWithCommentsRow
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.PostID,
			&i.Title,
			&i.CommentID,
			&i.Body,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByIDs = `-- name: GetUsersByIDs :many
SELECT id,
       username
FROM users
WHERE id IN (/*SLICE:ids*/?)
`

type GetUsersByIDsRow struct {
	ID       uint64
	Username string
}

func (q *Queries) GetUsersByIDs(ctx context.Context, ids []uint64) ([]GetUsersByIDsRow, error) {
	query := getUsersByIDs
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersByIDsRow
	for rows.Next() {
		var i GetUsersByIDsRow
		if err := rows.Scan(&i.ID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersPostsCount = `-- name: GetUsersPostsCount :many
SELECT users.id,
       users.username,
       COUNT(posts.id) AS posts_count
FROM users
         LEFT JOIN posts ON users.id = posts.user_id
GROUP BY users.id
`

type GetUsersPostsCountRow struct {
	ID         uint64
	Username   string
	PostsCount int64
}

func (q *Queries) GetUsersPostsCount(ctx context.Context) ([]GetUsersPostsCountRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersPostsCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersPostsCountRow
	for rows.Next() {
		var i GetUsersPostsCountRow
		if err := rows.Scan(&i.ID, &i.Username, &i.PostsCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
